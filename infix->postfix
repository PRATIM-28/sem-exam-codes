#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct stack
{
    int size;
    int top;
    char *arr;
};

int isempty(struct stack* ptr)
{
    if(ptr->top==-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isoperator(char ch)
{
    if(ch=='+'||ch=='-'||ch=='*'||ch=='/')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int precedence(char ch)
{
    if(ch=='*'||ch=='/')
    {
        return 3;
    }
    else if(ch=='+'||ch=='-')
    {
        return 2;
    }
    else
    {
        return 0;
    }
}


int isfull(struct stack *ptr)
{
    if(ptr->top==ptr->size-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(struct stack* ptr,char value)
{
    if(isfull(ptr))
    {
        printf("STACK OVERFLOW AND THE ELEMENT %c CANNOT BE PUSHED\n",value);
    }
    else
    {
    ptr->top++;
    ptr->arr[ptr->top]=value;
    }
}

int pop(struct stack *ptr)
{
    if(isempty(ptr))
    {
        printf("STACK UNDERFLOW");
    }
    else
    {
        int value=ptr->top;
        ptr->top--;
        return value;
    }
}

int stacktop(struct stack* sp)
{
    return sp->arr[sp->top];
}

int stackbottom(struct stack *sp)
{
    return sp->arr[0];
}

char* infixtopostfix(char* infix){
    struct stack * sp = (struct stack *) malloc(sizeof(struct stack));
    sp->size = 10; 
    sp->top = -1;
    sp->arr = (char *) malloc(sp->size * sizeof(char));
    char * postfix = (char *) malloc((strlen(infix)+1) * sizeof(char));
    int i=0; // Track infix traversal
    int j = 0; // Track postfix addition 
    while (infix[i]!='\0')
    {
        if(!isoperator(infix[i])){
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else{
            if(precedence(infix[i])> precedence(stacktop(sp))){
                push(sp, infix[i]);
                i++;
            }
            else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    while (!isempty(sp))    
    {
        postfix[j] = pop(sp);
        j++;
    }
    postfix[j] = '\0';
    return postfix;
}


int main()
{
   char* infix="a+b";
   printf("the postfic operation is %s",infixtopostfix(infix));
    
return 0;
}
